name: Deploy Release

on:
  workflow_dispatch:

# Ensure only one instance of either this is running at a time.
# This ensures that we don't put production into an inconsistent state.
concurrency:
  group: "prod-deployment"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write # Write is required to create/update releases
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Perform pre-release actions
        uses: danielemery/github-release-action/perform-pre-release@main # TODO target a static release
        id: pre_release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-version: ${{github.ref_name}}

      # TODO remove
      - name: Echo the outputs from the pre-release action
        run: |
          echo "releaseId: ${{ steps.pre_release.outputs.releaseId }}"
          echo "isExistingRelease: ${{ steps.pre_release.outputs.isExistingRelease }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        # To emulate deployments here we are simply shifting the latest tag to the appropriate docker image.
        # In a real world scenario, you would replace this with your actual deployment steps.
        run: |
          docker pull ghcr.io/${{ github.repository }}:${{github.ref_name}}
          docker tag ghcr.io/${{ github.repository }}:${{github.ref_name}} ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Perform post-release actions
        uses: danielemery/github-release-action/perform-post-release@main # TODO target a static release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-id: ${{ steps.pre_release.outputs.releaseId }}
